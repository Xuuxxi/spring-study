<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="com.xuuxxi"/>

    <!--方式一：使用原生API接口-->
    <aop:config>
        <!--切入点-->
        <!--
            expression : 表达式，是固定的
            execution : 要执行的位置,第一个 * 表示返回所有类型，后面是路径，(..) 是方法的参数类型
        -->
        <aop:pointcut id="pointcut" expression="execution(* com.xuuxxi.service.UserServiceImpl.*(..))"/>
        <!--执行环绕增加-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>


    <!--方法二：使用自定义类-->
    <aop:config>
        <!--自定义切面,ref 就是要引用的类-->
        <aop:aspect ref="diy">
            <!--切入点-->
            <aop:pointcut id="point" expression="execution(* com.xuuxxi.service.UserServiceImpl.*(..))"/>
            <!--通知-->
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>

    <!--方式三：使用注解   JDK(DEFAULT) while proxy-target-class="false"   cglib while proxy-target-class="true"-->
    <aop:aspectj-autoproxy/>
</beans>